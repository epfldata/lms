/*****************************************
  Emitting Generated Code                  
*******************************************/
class testMul extends ((Array[Tuple2[Int,Int]], Int)=>(Unit)) {
def apply(x0:Array[Tuple2[Int,Int]], x1:Int): Unit = {
val x2 = x0.length
val x3 = x2 + 1
val x4 = x3 * x3
val x5 = new Array[Anon111043964](x4)
val x14 = new Anon111043964(0,0,10000)
var x7 : Int = 1
val x66 = while (x7 < x3) {
val x8 = x3 - x7
var x10 : Int = 0
val x64 = while (x10 < x8) {
var x15: Anon111043964 = x14
val x11 = x10 + x7
val x12 = x10 + 1
val x16 = x12 == x11
val x28 = if (x16) {
val x21 = x15
val x22 = x21.mults
val x23 = 0 < x22
val x26 = if (x23) {
val x17 = x0(x10)
val x18 = x17._1
val x19 = x17._2
val x20 = new Anon111043964(x18,x19,0)
x15 = x20
()
} else {
()
}
x26
} else {
()
}
val x13 = x12 < x11
val x31 = x10 * x3
val x59 = if (x13) {
var x30 : Int = x12
val x57 = while (x30 < x11) {
val x32 = x31 + x30
val x33 = x5(x32)
val x34 = x30 * x3
val x35 = x34 + x11
val x36 = x5(x35)
val x37 = (x33,x36)
val x38 = x37._1
val x39 = x37._2
val x40 = x38.rows
val x41 = x39.cols
val x42 = x38.mults
val x43 = x39.mults
val x45 = x38.cols
val x50 = x15
val x44 = x42 + x43
val x46 = x40 * x45
val x47 = x46 * x41
val x48 = x44 + x47
val x51 = x50.mults
val x52 = x48 < x51
val x55 = if (x52) {
val x49 = new Anon111043964(x40,x41,x48)
x15 = x49
()
} else {
()
}

x30 = x30 + 1
}
x57
} else {
()
}
val x61 = x15
val x60 = x31 + x11
val x62 = x5(x60) = x61

x10 = x10 + 1
}

x7 = x7 + 1
}
val x67 = x5(x2)
val x68 = println(x67)
x68
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Anon111043964(rows: Int, cols: Int, mults: Int)
